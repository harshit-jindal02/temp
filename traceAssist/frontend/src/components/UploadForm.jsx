// // frontend/src/components/UploadForm.jsx
// import React, { useState } from 'react';
// import {
//   Box,
//   Button,
//   FormControl,
//   FormControlLabel,
//   FormLabel,
//   Radio,
//   RadioGroup,
//   TextField,
//   CircularProgress,
//   Input,
// } from '@mui/material';
// import axios from 'axios';

// export default function UploadForm({ apiBase, onAppReady }) {
//   const [sourceType, setSourceType] = useState('zip');
//   const [zipFile, setZipFile] = useState(null);
//   const [repoUrl, setRepoUrl] = useState('');
//   const [loading, setLoading] = useState(false);

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     setLoading(true);

//     try {
//       let res;
//       if (sourceType === 'zip') {
//         const formData = new FormData();
//         formData.append('file', zipFile);
//         res = await axios.post(
//           `${apiBase}/upload`,
//           formData,
//           { headers: { 'Content-Type': 'multipart/form-data' } }
//         );
//       } else {
//         res = await axios.post(
//           `${apiBase}/clone`,
//           { repo_url: repoUrl },
//           { headers: { 'Content-Type': 'application/json' } }
//         );
//       }

//       const { app_id } = res.data;
//       onAppReady(app_id);
//     } catch (err) {
//       console.error(err.response?.data || err.message);
//       alert('Failed to upload/clone. Check console for details.');
//     } finally {
//       setLoading(false);
//     }
//   };

//   return (
//     <Box
//       component="form"
//       onSubmit={handleSubmit}
//       display="flex"
//       flexDirection="column"
//       gap={5}
//     >
//       <FormControl component="fieldset">
//         <FormLabel component="legend">Source Type</FormLabel>
//         <RadioGroup
//           row
//           name="sourceType"
//           value={sourceType}
//           onChange={(e) => setSourceType(e.target.value)}
//         >
//           <FormControlLabel value="zip" control={<Radio />} label="Upload ZIP" />
//           <FormControlLabel value="github" control={<Radio />} label="GitHub Repo" />
//         </RadioGroup>
//       </FormControl>

//       <Box display="flex" gap={4} alignItems="center">
//         {sourceType === 'zip' ? (
//           <Button variant="outlined" component="label">
//             {zipFile ? zipFile.name : 'Select ZIP File'}
//             <Input
//               type="file"
//               accept=".zip"
//               required
//               sx={{ display: 'none' }}
//               onChange={(e) => setZipFile(e.target.files[0])}
//             />
//           </Button>
//         ) : (
//           <TextField
//             type="url"
//             label="GitHub Repo URL"
//             placeholder="https://github.com/user/repo.git"
//             value={repoUrl}
//             onChange={(e) => setRepoUrl(e.target.value)}
//             required
//             fullWidth
//           />
//         )}

//         <Button
//           type="submit"
//           variant="contained"
//           color="primary"
//           disabled={loading}
//           startIcon={loading && <CircularProgress size={20} />}
//         >
//           {loading ? 'Processing...' : 'Submit'}
//         </Button>
//       </Box>
//     </Box>
//   );
// }

// // Code Generated by Sidekick is for learning and experimentation purposes only.

import { useState } from 'react';
import {
  Box,
  Button,
  FormControl,
  FormControlLabel,
  FormLabel,
  Radio,
  RadioGroup,
  TextField,
  CircularProgress,
  Input,
} from '@mui/material';
import axios from 'axios';

export default function UploadForm({ onAppReady }) {
  const [sourceType, setSourceType] = useState('zip');
  const [zipFile, setZipFile] = useState(null);
  const [repoUrl, setRepoUrl] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      let res;
      if (sourceType === 'zip') {
        // ──────────── ZIP UPLOAD ────────────
        const formData = new FormData();
        formData.append('file', zipFile);
        res = await axios.post(
          'http://localhost:8000/upload',
          formData,
          { headers: { 'Content-Type': 'multipart/form-data' } }
        );
      } else {
        // ──────────── GITHUB CLONE ────────────
        res = await axios.post(
          'http://localhost:8000/clone',
          { repo_url: repoUrl },
          { headers: { 'Content-Type': 'application/json' } }
        );
      }

      const { app_id } = res.data;
      onAppReady(app_id);
    } catch (err) {
      console.error(err);
      alert('Failed to upload/clone. Check console for details.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box
      component="form"
      onSubmit={handleSubmit}
      display={'flex'}
      flexDirection={'column'}
      gap={5}
    >
      <FormControl component="fieldset">
        <FormLabel component="legend">Source Type</FormLabel>
        <RadioGroup
          row
          name="sourceType"
          value={sourceType}
          onChange={(e) => setSourceType(e.target.value)}
        >
          <FormControlLabel value="zip" control={<Radio />} label="Upload ZIP" />
          <FormControlLabel value="github" control={<Radio />} label="GitHub Repo" />
        </RadioGroup>
      </FormControl>

      <Box display={'flex'} gap={4}>
      {sourceType === 'zip' ? (
        <Button
          variant="outlined"
          component="label"
        >
          {zipFile ? zipFile.name : "Select ZIP File"}
          <Input
            type="file"
            accept=".zip"
            required
            sx={{ display: 'none' }}
            onChange={(e) => setZipFile(e.target.files[0])}
          />
        </Button>
      ) : (
        <TextField
          type="url"
          label="GitHub Repo URL"
          placeholder="https://github.com/user/repo.git"
          value={repoUrl}
          onChange={(e) => setRepoUrl(e.target.value)}
          required
          fullWidth
        />
      )}

      <Button
        type="submit"
        variant="contained"
        color="primary"
        sx={{ width: 'fit-content' }}
        disabled={loading}
        startIcon={loading && <CircularProgress size={20} />}
      >
        {loading ? 'Processing...' : 'Submit'}
      </Button>
      </Box>

    </Box>
  );
}